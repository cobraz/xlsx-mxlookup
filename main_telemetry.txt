package main

import (
	"context"
	"fmt"
	"log"
	"net"
	"net/http"

	otelhttp "go.opentelemetry.io/contrib/instrumentation/net/http"

	"go.opentelemetry.io/otel/api/correlation"
	"go.opentelemetry.io/otel/api/global"
	"go.opentelemetry.io/otel/exporters/stdout"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"
)

func initTracer() {
	// Create stdout exporter to be able to retrieve
	// the collected spans.
	exporter, err := stdout.NewExporter(stdout.WithPrettyPrint())
	if err != nil {
		log.Fatal(err)
	}

	// For the demonstration, use sdktrace.AlwaysSample sampler to sample all traces.
	// In a production application, use sdktrace.ProbabilitySampler with a desired probability.
	tp, err := sdktrace.NewProvider(sdktrace.WithConfig(sdktrace.Config{DefaultSampler: sdktrace.AlwaysSample()}),
		sdktrace.WithSyncer(exporter))
	if err != nil {
		log.Fatal(err)
	}
	global.SetTraceProvider(tp)
}

func main() {
	initTracer()

	domain := "ayr.no"

	client := http.Client{Transport: otelhttp.NewTransport(http.DefaultTransport)}

	ctx := correlation.NewContext(context.Background())

	mxrecords, _ := net.LookupMX(domain)
	for _, mx := range mxrecords {
		fmt.Println(mx.Host, mx.Pref)
	}

	// tr := global.Tracer("example/client")
	// _ = func(ctx context.Context) error {
	// 	ctx, span := tr.Start(ctx, "say hello", trace.WithAttributes(semconv.PeerServiceKey.String("ExampleService")))
	// 	defer span.End()
	// 	req, _ := http.NewRequestWithContext(ctx, "GET", "https://"+domain, nil)
	// 	_, err := client.Do(req)
	// 	return err
	// }(ctx)
}
